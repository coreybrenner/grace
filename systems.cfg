#
# Gracenote-specific, following Gracenote's platform naming schemes.
#
# Luckily, this is just a Perl script used in a special way.  We can
# execute code and set things up properly, as needed, before returning
# the systems configuration hash in the last statement.
#

use Grace::Host;

my $_hostsys = Grace::Host->sysname();
my $_hostcpu = Grace::Host->sysarch();

# These names follow existing Gracenote infrastructure platform hints.
if ($_hostsys eq 'darwin') {
    $_hostsys = 'mac';
} elsif ($_hostsys eq 'windows') {
    $_hostsys = 'win';
}

if ($_hostcpu eq 'x86_64') {
    $_hostcpu = 'x86-64';
} elsif ($_hostcpu eq 'x86_32') {
    $_hostcpu = 'x86-32';
}

my $_hosttag = $_hostsys . '_' . $_hostcpu;
print(STDERR "SYSTEMS.CFG: _hostsys='$_hostsys'\n");
print(STDERR "SYSTEMS.CFG: _hostcpu='$_hostcpu'\n");
print(STDERR "SYSTEMS.CFG: _hosttag='$_hosttag'\n");

# By default, target the host system.
my $_targsys = $_hostsys;
my $_targcpu = $_hostcpu;
my $_targtag = $_hosttag;

# On a Windows host, look to the environment and CL.EXE on the
# existing $PATH to determine what system we actually target.
if ($_hostsys eq 'win') {
    do "windows.cfg";
}

#
# This hash is returned to the builder configuration and is 'compiled'.
# Inheritance relationships are sussed out, and configurations are
# merged together.  The result is a 'dictionary' of system configurations
# which can be called upon by various parts of the system to guide,
# i.e., toolchain configurations and native binary target configurations.
#
my %_sysconf = (
    # Native configuration builds exclusively for the host system.
    'native'              => $_hosttag,

    # Default target configuration may be reset by e.g., windows.cfg.
    'default'             => $_targtag,

    # This configuration is used when building targets whose SYSCONF
    # attribute is set to 'common'.  These targets are done once for all
    # platforms in the build.
    'common'              => {
        sysname => 'common',
        instrum => 'common',
        # Force a 'common' arch into the actual configuration.
        sysconf => 'common',
#        overlay => 'strict',
        toolset => {
            'Common' => {
            },
        },
    },

    'fattest'             => {
        fatarch => [
            'x86',
            { sysarch => 'x64' },
        ],
    },

    #
    # The 'android' configuration contains settings common to all Android
    # platforms.  The individual platforms inherit this configuration.  When
    # the configuration is "compiled", the 'android' platform will end up
    # representing a group of stand-alone platforms, but will carry no other
    # configuration of its own.
    #
    'android'             => {
        sysname => 'android',
        # When we say 'android', we mean all these platforms:
        syslist => [
            'android_armeabi',
            'android_armeabi-v7a',
            'android_armeabi-v7a-hard',
            'android_arm64-v8a',
            'android_x86',
            'android_x86_64',
            'android_mips',
            'android_mips64',
        ],
        toolset => {
            'Android' => {
                toolapi => 9,
            },
        },
    },

    #
    # These Android configurations target single Android platforms,
    # but may be built together in a single 'android' platform.
    #
    'android_armeabi'     => {
        inherit => 'android',
        sysarch => 'armeabi',
        toolset => {
            'Android' => {
                toolcpu => 'armeabi',
            },
        },
    },
    'android_armeabi-v7a' => {
        inherit => 'android',
        sysarch => 'armeabi-v7a',
        toolset => {
            'Android' => {
                toolcpu => 'armeabi-v7a',
            },
        },
    },
    'android_armeabi-v7a-hard' => {
        inherit => 'android',
        sysarch => 'armeabi-v7a-hard',
        toolset => {
            'Android' => {
                toolcpu => 'armeabi-v7a-hard',
            },
        },
    },
    'android_arm64-v8a' => {
        inherit => 'android',
        sysarch => 'arm64-v8a',
        toolset => {
            'Android' => {
                toolcpu => 'arm64-v8a',
                toolapi => 21,
            },
        },
    },
    'android_mips'        => {
        inherit => 'android',
        sysarch => 'mips-32',
        toolset => {
            'Android' => {
                toolcpu => 'mips',
            },
        },
    },
    'android_mips64'      => {
        inherit => 'android',
        sysarch => 'mips-64',
        toolset => {
            'Android' => {
                toolcpu => 'mips64',
                toolapi => 21,
            },
        },
    },
    'android_x86'         => {
        inherit => 'android',
        sysarch => 'x86-32',
        toolset => {
            'Android' => {
                toolcpu => 'x86',
            },
        },
    },
    'android_x86_64'      => {
        inherit => 'android',
        sysarch => 'x86_64',
        toolset => {
            'Android' => {
                toolcpu => 'x86_64',
                toolapi => 21,
            },
        },
    },

    'freebsd_x86-64'      => {
        sysname => 'freebsd',
        sysarch => 'x86-64',
        toolset => {
            'System' => {
                toolcpu => 'amd64',
            },
        },
    },

    #
    # Single-platform iOS configs.  The fat iOS configuration's subarches
    # inherit these settings, and will configure into the same paths.  The
    # builds must end up equivalent, and then the fat architecture may be
    # seen for a joining of multiple stand-alone architectures.
    #
    'ios_arm64'           => {
        inherit => 'ios',
        sysarch => 'arm64',
        toolset => {
            'Xcode' => {
                toolcpu => 'arm64',
            },
        },
    },
#    'ios_armv6-32'        => {
#        inherit => 'ios',
#        sysarch => 'armv6-32',
#        toolset => {
#            'Xcode' => {
#                toolcpu => 'armv6',
#            },
#        },
#    },
    'ios_armv7-32'        => {
        inherit => 'ios',
        sysarch => 'armv7-32',
        toolset => {
            'Xcode' => {
                toolcpu => 'armv7',
            },
        },
    },
    'ios_armv7s-32'       => {
        inherit => 'ios',
        sysarch => 'armv7s-32',
        toolset => {
            'Xcode' => {
                toolcpu => 'armv7s',
            },
        },
    },
    'ios_x86-32'          => {
        inherit => 'ios',
        sysarch => 'x86-32',
        toolset => {
            'Xcode' => {
                toolcpu => 'i386',
                toolsys => 'iPhoneSimulator',
            },
        },
    },
    'ios_x86-64'          => {
        inherit => 'ios',
        sysarch => 'x86-64',
        toolset => {
            'Xcode' => {
                toolcpu => 'x86_64',
                toolsys => 'iPhoneSimulator',
            },
        },
    },

    #
    # Fat iOS targets configure here.  Setting 'syspath' in the 'fatarch'
    # configs causes the sub-architectures to share their artifacts and
    # configurations with stand-alone ios_whatever builds.  The variant
    # back-end will honor the syspath field given here, instead of using
    # the "$sysconf/fat/$subarch" path it would normally generate.
    #
    'ios'                 => {
        sysname => 'ios',
        fatarch => {
            'arm64'     => {
                inherit => 'ios_arm64',
                syspath => 'ios_arm64',
            },
#            'armv6'  => {
#                inherit => 'ios_armv6-32',
#                syspath => 'ios_armv6-32',
#            },
            'armv7'  => {
                inherit => 'ios_armv7-32',
                syspath => 'ios_armv7-32',
            },
            'armv7s' => {
                inherit => 'ios_armv7s-32',
                syspath => 'ios_armv7s-32',
            },
#            'i386'    => {
#                inherit => 'ios_x86-32',
#                syspath => 'ios_x86-32',
#            },
#            'amd64'     => {
#                inherit => 'ios_x86-64',
#                syspath => 'ios_x86-64',
#            },
        },
        toolset => {
            'Xcode' => {
                toolsys => 'iPhoneOS',
                minvers => '7.0',
            },
        },
    },

    # Various Linux platforms.
    'linux_arm-32'        => {
        sysname => 'linux',
        sysarch => 'arm-32',
        toolset => {
            'Custom' => {
                toolset => 'arm-2010-09',
                toolsys => 'linux',
                toolcpu => 'arm',
            },
        },
    },
    'linux_armhf-32'      => {
        sysname => 'linux',
        sysarch => 'armhf-32',
        toolset => {
            'System' => { # Works on Ubuntu hosts.
                toolcpu => 'armhf',
            },
        },
    },
    'linux_armhfv8-64'    => {
        sysname => 'linux',
        sysarch => 'armhfv8-64',
        toolset => {
            'System' => {
                toolcpu => 'armv8',
            },
        },
    },
    'linux_mips-32EL'     => {
        sysname => 'linux',
        sysarch => 'mips-32EL',
        toolset => {
            'Custom' => {
                toolset => 'codesourcery-2011-09-90',
                toolsys => 'linux',
                toolcpu => 'mipsel',
            },
        },
    },
    'linux_x86-32'        => {
        sysname => 'linux',
        sysarch => 'x86-32',
        toolset => {
            'System' => {
                toolcpu => 'i686',
            },
        },
    },
    'linux_x86-64'        => {
        sysname => 'linux',
        sysarch => 'x86-64',
        toolset => {
            'System' => {
                toolcpu => 'amd64',
            },
        },
    },

    # OSX.
    'mac'                 => {
        sysname => 'mac',
        # Configures as an alias which builds @syslist platforms.
        syslist => [
            'mac_x86-32',
            'mac_x86-64',
#            'mac_ppc-32',
#            'mac_ppc-64',
        ],
        toolset => {
            'Xcode' => {
                toolsys => 'MacOSX',
                minvers => '10.7',
            },
            'Clang' => {
                environ => [ 'MACOSX_DEPLOYMENT_TARGET' ],
            },
        },
    },
    'mac_x86-32'          => {
        inherit => 'mac',
        sysarch => 'x86-32',
        toolset => {
            'Xcode' => {
                toolcpu => 'i386',
            },
        },
    },
    'mac_x86-64'          => {
        inherit => 'mac',
        sysarch => 'x86-64',
        toolset => {
            'Xcode' => {
                toolcpu => 'x86_64',
            },
        },
    },
    'mac_ppc-32'          => {
        inherit => 'mac',
        sysarch => 'ppc-32',
        toolset => {
            'Xcode' => {
                toolcpu => 'ppc',
                minvers => '10.4',
            },
        },
    },
    'mac_ppc-64'          => {
        inherit => 'mac',
        sysarch => 'ppc-64',
        toolset => {
            'Xcode' => {
                toolcpu => 'ppc64',
                minvers => '10.4',
            },
        },
    },

    # QNX 6.5.  Group build.
    'qnx'                 => {
        sysname => 'qnx',
        # Configures as an alias which builds @syslist platforms.
        syslist => [
            'qnx_armv7-32',
            'qnx_x86-32',
            'qnx_sh-32',
        ],
        toolset => {
            'Custom' => {
                toolset => 'qnx650',
                toolsys => 'nto',
            },
        },
    },
    'qnx_armv7-32'        => {
        inherit => 'qnx',
        sysarch => 'armv7-32',
        toolset => {
            'Custom' => {
                toolcpu => 'armv7le',
            },
        },
    },
    'qnx_x86-32'          => {
        inherit => 'qnx',
        sysarch => 'x86-32',
        toolset => {
            'Custom' => {
                toolcpu => 'x86',
            },
        },
    },
    'qnx_sh-32'           => {
        inherit => 'qnx',
        sysarch => 'sh-32',
        toolset => {
            'Custom' => {
                toolcpu => 'shle',
            },
        },
    },

    # Single-platform UWP configs.
    'uwp_x86-32'          => {
        inherit => 'uwp',
        sysarch => 'x86-32',
        toolset => {
            'VisualStudio' => {
                toolcpu => 'x86',
            },
        },
    },
    'uwp_x86-64'          => {
        inherit => 'uwp',
        sysarch => 'x86-64',
        toolset => {
            'VisualStudio' => {
                toolcpu => 'x64',
            },
        },
    },
    'uwp_arm-32'          => {
        inherit => 'uwp',
        sysarch => 'arm-32',
        toolset => {
            'VisualStudio' => {
                toolcpu => 'arm',
            },
        },
    },
    # Microsoft Windows Universal Windows Platform.  Fat configs.
    'uwp'                 => {
        sysname => 'uwp',
        fatarch => {
            'x86-32' => {
                inherit => 'uwp_x86-32',
            },
            'x86-64' => {
                inherit => 'uwp_x86-64',
            },
            'arm-32' => {
                inherit => 'uwp_arm-32',
            },
        },
        toolset => {
            'VisualStudio' => {
                toolsys => 'UniversalWindows',
                release => sub {
#                    use Grace::Toolset::VisualStudio;
#                    Grace::Toolset::VisualStudio->select_release(
#                        toolsys => 'uwp',
#                        require => {
#                            need => '[2015-]',
#                        },
#                    );
                },
            },
        },
    },

    # Windows platforms.
    'win'                 => {
        sysname => 'win',
        # Configures as alias which builds @syslist platforms.
        syslist => [
            'win_x86-32',
            'win_x86-64',
        ],
        toolset => {
            # This configuration auto-configures.
            'VisualStudio' => {
                toolsys => 'Windows',
                #
                # Detect whether the pre-configured toolchain meets
                # requirements (need VS2005+, want VS2013).  If the
                # configured toolchain does not meet requirements,
                # or a toolchain is not already configured, the driver
                # will go out and try to find an installed toolchain
                # that meets specifications, and return info for that.
                #
                release => sub {
#                    use Grace::Toolset::VisualStudio;
#                    Grace::Toolset::VisualStudio->select_release(
#                        toolsys => 'windows',
#                        require => {
#                            want => '2013',
#                            need => '[2005-]',
#                        },
#                    );
                },
                toolcpu => sub {
#                    use Grace::Toolset::VisualStudio;
#                    Grace::Toolset::VisualStudio->select_toolcpu(
#                        toolsys => 'windows',
#                    );
                },
                toolsdk => sub {
#                    use Grace::Toolset::VisualStudio;
#                    Grace::Toolset::VisualStudio->select_toolsdk(
#                        toolsys => 'windows',
#                        version => {
#                            want => '7.1',
#                        },
#                    );
                },
            },
        },
    },
    'win_x86-32'          => {
        inherit => 'win',
        sysarch => 'x86-32',
        toolset => {
            'VisualStudio' => {
                toolcpu => 'x86',
            },
        },
    },
    'win_x86-64'          => {
        inherit => 'win',
        sysarch => 'x86-64',
        toolset => {
            'VisualStudio' => {
                toolcpu => 'x64',
            },
        },
    },

    # Windows CE target platforms.
    'wince_arm-32'        => {
        sysname => 'wince',
        sysarch => 'arm-32',
        toolset => {
            'Wince600' => {
                toolsys => 'WindowsCE',
                toolcpu => 'arm',
            },
        },
    },
    'wince_sh-32'         => {
        sysname => 'wince',
        sysarch => 'sh-32',
        toolset => {
            'Wince600' => {
                toolsys => 'WindowsCE',
                toolcpu => 'sh',
            },
        },
    },
    'wince_cp7arm-32'     => {
        sysname => 'wince',
        sysarch => 'cp7arm-32',
        toolset => {
            'Wince700' => {
                toolsys => 'WindowsCE',
                toolcpu => 'arm',
            },
        },
    },
    'wince_cp7sh-32'      => {
        sysname => 'wince',
        sysarch => 'cp7sh-32',
        toolset => {
            'Wince700' => {
                toolsys => 'WindowsCE',
                toolcpu => 'sh',
            },
        },
    },
    'wince_cp7armv7-32'   => {
        sysname => 'wince',
        sysarch => 'cp7armv7-32',
        toolset => {
            'Wince700_ARMv7' => {
                toolsys => 'WindowsCE',
                toolcpu => 'arm',
            },
        },
    },

    # Windows Phone 8.0 platforms.
    'winphone8'           => {
        sysname => 'winphone8',
        # Configures as alias which builds @syslist platforms.
        syslist => [
#            'winphone8_x86-64',
            'winphone8_x86-32',
            'winphone8_arm-32',
        ],
        toolset => {
            'VisualStudio' => {
                toolsys => 'winphone8',
                release => '2012',
            },
        },
    },
    # Windows Phone (Separate).
    'winphone8_arm-32'    => {
        inherit => 'winphone8',
        sysarch => 'arm-32',
        toolset => {
            'VisualStudio' => {
                toolcpu => 'arm',
            },
        },
    },
    'winphone8_x86-32'    => {
        inherit => 'winphone8',
        sysarch => 'x86-32',
        toolset => {
            'VisualStudio' => {
                toolcpu => 'x86',
            },
        },
    },
    'winphone8_x86-64'    => {
        inherit => 'winphone8',
        sysarch => 'x86-64',
        toolset => {
            'VisualStudio' => {
                toolcpu => 'x64',
            },
        },
    },

    # Windows RT (Separate).
    'winrt_arm-32'        => {
        inherit => 'winrt',
        sysarch => 'arm-32',
        toolset => {
            'VisualStudio' => {
                toolcpu => 'arm',
            },
        },
    },
    'winrt_x86-32'        => {
        inherit => 'winrt',
        sysarch => 'x86-32',
        toolset => {
            'VisualStudio' => {
                toolcpu => 'x86',
            },
        },
    },
    'winrt_x86-64'        => {
        inherit => 'winrt',
        sysarch => 'x86-64',
        toolset => {
            'VisualStudio' => {
                toolcpu => 'x64',
            },
        },
    },
    # Windows RT (Fat).  Also base configuration for separate configs.
    'winrt'               => {
        sysname => 'winrt',
        toolset => {
            'VisualStudio' => {
                toolsys => 'winrt',
                release => '2013',
            },
        },
        fatarch => {
            'arm-32' => {
                inherit => 'winrt_arm-32',
            },
            'x86-32' => {
                inherit => 'winrt_x86-32',
            },
            'x86-64' => {
                inherit => 'winrt_x86-64',
            },
        },
    },
);

#
# This is the last-evaluated statement in the file, so this is the value to
# which this file evaluates.  The value is a reference to a hash populated
# with configurations keyed on the target platform name.  After the hash is
# read, it is specialized such that the lookup operation, upon encountering
# CODE as data, will execute the code and return the result.  This allows
# the system config file to auto-configure the build for its targets, when
# the environment guides the default target system selection.
#
return \%_sysconf;

